
-- For info: The data set (imported from Excel) contains two tables: Email and Sales
-- Source of data set: https://info.enterprisedna.co/power-bi-challenge-2/
-- The purpose of this project is to work on Data Cleaning and Data Exploration techniques

USE CustomerInsight;



-- 1. Data Cleaning

-- Rename all columns in the data set to remove spacing as it is best practice

-- Change data type of Sales.SalesValue from MONEY to DECIMAL to avoid rounding errors

ALTER TABLE Sales
ALTER COLUMN SalesValue DECIMAL(9,2);

-- Change Sales.ProductID from NULL-able to NON-NULL-able, as it is logical that all sales transaction will involve a product, hence there will always be a product ID

ALTER TABLE Sales
ALTER COLUMN ProductID NVARCHAR(255) NOT NULL;

-- Change data type of Sales.Date and Email.Date from DATETIME to DATE as the data does not have the time component

ALTER TABLE Sales
ALTER COLUMN Date DATE;

ALTER TABLE Email
ALTER COLUMN Date DATE;

-- Create columns for day and month in both tables in the data set

ALTER TABLE Sales
ADD date_day TINYINT;

ALTER TABLE Sales
ADD date_month TINYINT;

ALTER TABLE Email
ADD date_day TINYINT;

ALTER TABLE Email
ADD date_month TINYINT;

UPDATE Sales
SET date_day = RIGHT(Date, 2);

UPDATE Sales
SET date_month = LEFT(RIGHT(Date, 5), 2);

UPDATE Email
SET date_day = RIGHT(Date, 2);

UPDATE Email
SET date_month = LEFT(RIGHT(Date, 5), 2);



-- 2. Data Exploration

-- Data Exploration of the Sales table

-- Gain an understanding of company's health in 2019
-- To find out total revenue in 2019

SELECT SUM(SalesValue) AS total_sales
FROM Sales;

-- To find out total revenue by product and their ranking by sales amount 

SELECT Product, SUM(SalesValue) AS total_sales, DENSE_RANK() OVER (ORDER BY SUM(SalesValue) DESC) AS product_rank
FROM Sales
GROUP BY Product;

-- To find out total revenue by month and their ranking by sales amount
-- Top three months with highest sales include: Dec, Jul, Jan
-- This could be due to expenditure of budget during the year-start, year-mid, and year-end period 

SELECT LEFT(RIGHT(Date, 5), 2) AS sales_month, SUM(SalesValue) as total_sales, DENSE_RANK() OVER (ORDER BY SUM(SalesValue) DESC) AS month_rank
FROM Sales
GROUP BY LEFT(RIGHT(Date, 5), 2);

-- Create temp table to store result for the following query:
-- Find out the top three products sold for each month by their total sales amount
-- Thereafter, use the temp table to find out how many times each product appears and the total annual sales generated by those products 

CREATE TABLE #total_monthly_product_sales_ranked(
	date_month TINYINT,
	Product VARCHAR(255),
	total_sales_by_product DECIMAL(9, 2),
	monthly_product_rank TINYINT
	);

WITH total_sales_by_product_cte AS 
(SELECT date_month, Product, SUM(SalesValue) AS total_sales_by_product, DENSE_RANK() OVER (PARTITION BY date_month ORDER BY SUM(SalesValue) DESC) AS monthly_product_rank
FROM Sales
GROUP BY date_month, Product)
INSERT INTO #total_monthly_product_sales_ranked
SELECT *
FROM total_sales_by_product_cte
WHERE monthly_product_rank < 4
ORDER BY date_month, monthly_product_rank;

SELECT Product, SUM(total_sales_by_product) AS total_annual_product_sales, COUNT(Product) AS product_appeared_in_table
FROM #total_monthly_product_sales_ranked
GROUP BY Product
ORDER BY total_annual_product_sales DESC;

-- Find out number of unique customers in 2019

SELECT COUNT(DISTINCT CustomerName) AS unique_customer_count
FROM Sales;

-- Find out which customers are in the top 20% in terms of sales revenue generated
-- Based on the Pareto Principle, these are the customers to pay attention to

CREATE TABLE #cust_rev(
	ID NVARCHAR(255),
	CustomerName VARCHAR(255),
	total_revenue_by_customer DECIMAL(9,2),
	row_no INT
	);

INSERT INTO #cust_rev
SELECT ID, CustomerName, SUM(SalesValue) AS total_revenue_by_customer, ROW_NUMBER() OVER (ORDER BY SUM(SalesValue))
FROM Sales
GROUP BY ID, CustomerName;

WITH top_20_perc_rev AS
(SELECT TOP 20 PERCENT total_revenue_by_customer
FROM #cust_rev)
SELECT CustomerName, total_revenue_by_customer
FROM #cust_rev
WHERE total_revenue_by_customer IN (SELECT * FROM top_20_perc_rev);

-- Find out the mean, median, and range of sales revenue per customer 

SELECT AVG(total_revenue_by_customer) AS mean_rev, (MAX(total_revenue_by_customer) - MIN(total_revenue_by_customer)) AS range_of_rev,
	(SELECT total_revenue_by_customer
	FROM #cust_rev
	WHERE row_no = CAST(((263+1)/2) AS INT)
	) AS median_rev 
FROM #cust_rev;



-- Data Exploration of the Email table

-- Exploring the performance of the email campaign
-- Find out basic stats of campaign and store them in a temp table

CREATE TABLE #email_campaign_stats(
	perc_email_received FLOAT,
	perc_email_opened FLOAT,
	perc_link_clicked FLOAT
	);

WITH email_received_cte AS(
SELECT ((CAST(SUM(CASE 
	WHEN EmailReceived = 'TRUE' THEN 1 
	ELSE 0 
	END) AS FLOAT) / CAST((COUNT(EmailReceived)) AS FLOAT)) * 100) AS perc_email_received
FROM Email),
email_opened_cte AS(
SELECT ((CAST(SUM(CASE
	WHEN EmailOpened = 'TRUE' THEN 1
	ELSE 0
	END) AS FLOAT) / CAST(COUNT(EmailReceived) AS FLOAT)) * 100) AS perc_email_opened
FROM Email),
link_clicked_cte AS(
SELECT ((CAST(SUM(CASE
	WHEN LinkClicked = 'TRUE' THEN 1
	ELSE 0
	END) AS FLOAT) / 
	CAST(SUM(CASE
		WHEN EmailOpened = 'TRUE' THEN 1
		ELSE 0
		END) AS FLOAT)) * 100) AS perc_link_clicked
FROM Email)
INSERT INTO #email_campaign_stats
SELECT perc_email_received, perc_email_opened, perc_link_clicked
FROM email_received_cte, email_opened_cte, link_clicked_cte;

-- Find out if our top 20% customers are engaged in our email campaign
-- Store results in a temp table for further analysis

CREATE TABLE #top_20_perc_customer_email(
	ID NVARCHAR(255),
	CustomerName VARCHAR(255),
	total_revenue_by_customer FLOAT,
	EmailReceived VARCHAR(20),
	EmailOpened VARCHAR(20),
	LinkClicked VARCHAR(20),
	date_month INT);

WITH top_20_perc_rev AS
(SELECT TOP 20 PERCENT total_revenue_by_customer, ID
FROM #cust_rev)
INSERT INTO #top_20_perc_customer_email
SELECT cr.ID, cr.CustomerName, cr.total_revenue_by_customer, e.EmailReceived, e.EmailOpened, e.LinkClicked, e.date_month
FROM #cust_rev cr
JOIN Email e ON cr.ID = e.ID
WHERE cr.ID IN (SELECT ID FROM top_20_perc_rev)
ORDER BY cr.total_revenue_by_customer DESC, date_month;

-- Find out the email campaign stats for each customer by month

SELECT CustomerName, total_revenue_by_customer, date_month,
	((CAST(SUM(CASE WHEN EmailReceived = 'TRUE' THEN 1 ELSE 0 END) AS FLOAT) / CAST((COUNT(EmailReceived)) AS FLOAT)) * 100) AS perc_email_received,
	((CAST(SUM(CASE WHEN EmailOpened = 'TRUE' THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(EmailReceived) AS FLOAT)) * 100) AS perc_email_opened,
	((CAST(SUM(CASE WHEN LinkClicked = 'TRUE' THEN 1 ELSE 0	END) AS FLOAT) / 
	CAST((CASE WHEN SUM(CASE WHEN EmailOpened = 'TRUE' THEN 1 ELSE 0 END) > 0 THEN SUM(CASE WHEN EmailOpened = 'TRUE' THEN 1 ELSE 0 END) ELSE NULL END) AS FLOAT)) * 100) AS perc_link_clicked
FROM #top_20_perc_customer_email
GROUP BY CustomerName, total_revenue_by_customer, date_month
ORDER BY total_revenue_by_customer DESC;

-- Find out the overall email campaign stats for the top 20% customers by month

WITH top_20_perc_email_stats AS(
SELECT CustomerName, total_revenue_by_customer, date_month,
	((CAST(SUM(CASE WHEN EmailReceived = 'TRUE' THEN 1 ELSE 0 END) AS FLOAT) / CAST((COUNT(EmailReceived)) AS FLOAT)) * 100) AS perc_email_received,
	((CAST(SUM(CASE WHEN EmailOpened = 'TRUE' THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(EmailReceived) AS FLOAT)) * 100) AS perc_email_opened,
	((CAST(SUM(CASE WHEN LinkClicked = 'TRUE' THEN 1 ELSE 0	END) AS FLOAT) / 
	CAST((CASE WHEN SUM(CASE WHEN EmailOpened = 'TRUE' THEN 1 ELSE 0 END) > 0 THEN SUM(CASE WHEN EmailOpened = 'TRUE' THEN 1 ELSE 0 END) ELSE NULL END) AS FLOAT)) * 100) AS perc_link_clicked
FROM #top_20_perc_customer_email
GROUP BY CustomerName, total_revenue_by_customer, date_month)
SELECT date_month, ROUND(AVG(perc_email_received),2) AS overall_perc_email_received, ROUND(AVG(perc_email_opened),2) AS overall_perc_email_opened, ROUND(AVG(perc_link_clicked), 2) AS overall_perc_link_clicked
FROM top_20_perc_email_stats
WHERE (perc_email_received IS NOT NULL OR perc_email_received > 0) AND (perc_email_opened IS NOT NULL OR perc_email_received > 0) AND (perc_link_clicked IS NOT NULL OR perc_email_received > 0)
GROUP BY date_month
ORDER BY date_month;